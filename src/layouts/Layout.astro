---
import {tokenValid,tokencloseToExpiration } from "../users/utils/utils";
import Menu from "./Menu.astro";
import SideBar from "./SideBar/SideBar.astro";
import {refreshToken} from "../users/api/userApi"
// Usar variables de entorno en archivos .astro
const apiUrl = import.meta.env.PUBLIC_API_URL;
const siteName = import.meta.env.PUBLIC_SITE_NAME;

interface Props {
    title: string;
}

const { title } = Astro.props;

const token = Astro.cookies.get("access_token")?.value ?? "";
const refreshTokenCookie = Astro.cookies.get("refresh_token")?.value ?? "";
const tokenValido = await tokenValid(token);

---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>

        <link
            href="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.css"
            rel="stylesheet"
        />
        <script
            src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
        ></script>
        <script
            src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
        ></script>
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
            rel="stylesheet"
        />
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
            rel="stylesheet"
        />
    </head>
    <body>
        {
            tokenValido ? (
                <div id="app" class="bg-primary-50">
                  
                    <SideBar />
                    <div class="[grid-area:main] ">
                        <slot />
                    </div>
                </div>
            ) : (
                <Menu />
                <div class="w-full bg-gradient-to-t from-[#7028e4] to-[#e5b2ca]">
                    <slot />
                </div>
            )
        }
    </body>
</html>

<style is:global>
    html,
    body {
        /* background-image: linear-gradient(to top, #7028e4 0%, #e5b2ca 100%); */
        margin: 0;
        font-family: system-ui, sans-serif;
        width: 100%;
        height: 100%;
        color: white;
        font-size: 1rem;
    }

    #app {
        display: grid;
        grid-template-areas:
            "aside header header"
            "aside main main";
        grid-template-columns: 300px 1fr;
        grid-template-rows: 70px auto;
    }

    /* Añadir un diseño responsivo usando Tailwind para pantallas grandes */
    @media (max-width: 768px) {
        #app {
            grid-template-areas:
                " header header"
                " main main";
            grid-template-columns: 300px 1fr;
            grid-template-rows: 70px auto;
        }
    }
</style>

<script>
    var themeToggleDarkIcon = document.getElementById("theme-toggle-dark-icon");
    var themeToggleLightIcon = document.getElementById(
        "theme-toggle-light-icon",
    );

    // Change the icons inside the button based on previous settings
    if (
        localStorage.getItem("color-theme") === "dark" ||
        (!("color-theme" in localStorage) &&
            window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
        themeToggleLightIcon?.classList.remove("hidden");
    } else {
        themeToggleDarkIcon?.classList.remove("hidden");
    }

    var themeToggleBtn = document.getElementById("theme-toggle");

    themeToggleBtn?.addEventListener("click", function () {
        // toggle icons inside button
        themeToggleDarkIcon?.classList.toggle("hidden");
        themeToggleLightIcon?.classList.toggle("hidden");

        // if set via local storage previously
        if (localStorage.getItem("color-theme")) {
            if (localStorage.getItem("color-theme") === "light") {
                document.documentElement.classList.add("dark");
                localStorage.setItem("color-theme", "dark");
            } else {
                document.documentElement.classList.remove("dark");
                localStorage.setItem("color-theme", "light");
            }

            // if NOT set via local storage previously
        } else {
            if (document.documentElement.classList.contains("dark")) {
                document.documentElement.classList.remove("dark");
                localStorage.setItem("color-theme", "light");
            } else {
                document.documentElement.classList.add("dark");
                localStorage.setItem("color-theme", "dark");
            }
        }
    });
</script>
